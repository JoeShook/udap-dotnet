@using Microsoft.IdentityModel.Tokens;
@using Udap.Model.Registration
@using Udap.Model.Access
@implements IAppState
@inject ILocalStorageService LocalStorageService

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {

    [Parameter]
    public RenderFragment ChildContent
    {
        get => _childContent;
        set => _childContent = value;
    }

    private string _caller = "";

    public void SetProperty(
        ComponentBase caller,
        string propertyName,
        object? propertyValue, 
        bool saveChanges = true,
        bool fhirStateHasChanged = true)
    {
        try
        {
            var prop = this.GetType().GetProperty(propertyName);
            if (prop != null)
            {
                this._caller = caller.GetType().Name;
                prop.SetValue(this, propertyValue);
                if (saveChanges)
                {
                    this.SaveChanges();
                }
                if (fhirStateHasChanged)
                {
                    StateHasChanged();
                }
            }
        }
        catch (Exception)
        {
            Console.WriteLine($"$Failed to set property: {propertyName}");
        }
    }

    private string _metadataUrl = "https://fhirlabs.net/fhir/r4/.well-known/udap";
    public string MetadataUrl
    {
        get => _metadataUrl;
        private set
        {
            _metadataUrl = value;
            if (_caller == "Toolbar")
            {
                // The Toolbar component changed the AppState Message property
            }
        }
    }

    private UdapMetadata? _udapMetadata;
    private RenderFragment _childContent;
    private string _softwareStatementBeforeEncoding = string.Empty;
    private UdapRegisterRequest? _registrationRequest;
    private Oauth2FlowEnum _oauth2Flow;
    private RegistrationDocument? _registrationDocument;
    private UdapClientCredentialsTokenRequest? _clientCredentialsTokenRequest;
    private UdapAuthorizationCodeTokenRequest? _authorizationCodeTokenRequest;
    private AccessCodeRequestResult? _accessCodeRequestResult;
    private LoginCallBackResult? _loginCallBackResult;
    private TokenResponseModel? _accessTokens;
    private ClientStatus _status = new ClientStatus(false, "Missing");
    private string? _authorizationCodeRequest;


    public UdapMetadata? UdapMetadata
    {
        get => _udapMetadata;
        private set
        {
            _udapMetadata = value;
        }
    }

    public string SoftwareStatementBeforeEncoding
    {
        get => _softwareStatementBeforeEncoding;
        private set => _softwareStatementBeforeEncoding = value;
    }

    public UdapRegisterRequest? RegistrationRequest
    {
        get => _registrationRequest;
        private set => _registrationRequest = value;
    }

    public Oauth2FlowEnum Oauth2Flow
    {
        get => _oauth2Flow;
        private set => _oauth2Flow = value;
    }

    public RegistrationDocument? RegistrationDocument
    {
        get => _registrationDocument;
        private set => _registrationDocument = value;
    }

    public UdapClientCredentialsTokenRequest? ClientCredentialsTokenRequest
    {
        get => _clientCredentialsTokenRequest;
        private set => _clientCredentialsTokenRequest = value;
    }

    public UdapAuthorizationCodeTokenRequest? AuthorizationCodeTokenRequest
    {
        get => _authorizationCodeTokenRequest;
        private set => _authorizationCodeTokenRequest = value;
    }

    public AccessCodeRequestResult? AccessCodeRequestResult
    {
        get => _accessCodeRequestResult;
        private set => _accessCodeRequestResult = value;
    }

    public LoginCallBackResult? LoginCallBackResult
    {
        get => _loginCallBackResult;
        private set => _loginCallBackResult = value;
    }

    public TokenResponseModel? AccessTokens
    {
        get => _accessTokens;
        private set => _accessTokens = value;
    }

    public ClientStatus Status
    {
        get
        {
            if (AccessTokens == null)
            {
                return new ClientStatus(false, "Missing");
            }

            if (AccessTokens.IsError)
            {
                return new ClientStatus(false, "Error");
            }

            if (DateTime.UtcNow >= AccessTokens.ExpiresAt)
            {
                return new ClientStatus (false, "Expired");
            }

            var tokensList = new List<string>();

            if (!AccessTokens.AccessToken.IsNullOrEmpty())
            {
                tokensList.Add("Access");
            }
            if (!AccessTokens.IdentityToken.IsNullOrEmpty())
            {
                tokensList.Add("Identity");
            }
            if (!AccessTokens.RefreshToken.IsNullOrEmpty())
            {
                tokensList.Add("Refresh");
            }

            var statusMessage = string.Join(" | ", tokensList);

            return new ClientStatus(true, statusMessage);
        }

        private set
        {
            _status = value;
            if (_caller == "udapBusinesstoBusiness")
            {
              //example of potential logic
            }
        }
    }

    public string? AuthorizationCodeRequest
    {
        get => _authorizationCodeRequest;
        private set => _authorizationCodeRequest = value;
    }

        private const string UdapStateKeyName = "udapClientState";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // do this only once
        {
            // Get the JSON data
            var json = await LocalStorageService.GetItemAsStringAsync(UdapStateKeyName);
            if (json != null && json != "")
            {
                // Deserialize to AppStateData
                var appStateData = JsonSerializer.Deserialize<UdapClientState>(json);

                var properties = appStateData.GetType().GetProperties();
                foreach (var property in properties)
                {
                    var type = property.PropertyType;
                    var value = property.GetValue(appStateData);
                    SetProperty(this, property.Name, value, false);
                }
                // Re-render
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    public void SaveChanges()
    {
        // LocalStorage allows up to 5MB by default.
        // Test: https://arty.name/localstorage.html
        // TIP: Never store sensitive data in LocalStorage

        var appState = (IAppState)this;
        var json = JsonSerializer.Serialize(appState);
        LocalStorageService.SetItemAsStringAsync(UdapStateKeyName, json);
    }
}