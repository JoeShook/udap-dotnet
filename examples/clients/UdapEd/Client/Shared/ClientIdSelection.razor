

<MudGrid Spacing="2" Justify="Justify.FlexEnd" Class="bottom:0;right:0">
    <MudItem lg="4" sm="12" md="12" xs="12">
        <MudSelect @bind-Value="ClientId" 
                   Label="Select OAuth2Flow Flow"
                   Placeholder="Please Select"
                   AdornmentIcon="@Icons.Material.Outlined.ArrowDropDown"
                   AdornmentColor="Color.Primary"
                   Variant="Variant.Outlined"
                   FullWidth=false>
            @if (ClientRegistrations != null)
            {
                foreach (KeyValuePair<string, ClientRegistration> keyValuePair in ClientRegistrations)
                {
                    <MudSelectItem Value="@keyValuePair.Key">@keyValuePair.Key</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>  
    <MudItem lg="4" sm="6" md="6" xs="12">
        <MudTextField Label="Grant Type" @bind-Value="GrantType"/>
    </MudItem>  
    <MudItem lg="4" sm="6" md="6" xs="12">
        <MudTextField Label="Subject Alt Name" @bind-Value="SubjAltName" />
    </MudItem>
    @if (TieredOauth)
    {
        <MudItem xs="12">
            <MudGrid Spacing="2" Justify="Justify.FlexStart" align-start>

                <MudItem lg="6" md="8" sm="10" xs="12">
                    <MudTextField @bind-Value="IdPBaseUrl"
                                  Label="OpenID Connect Identity Provider"
                    @onblur="SelectIdPBaseUrl" />
                </MudItem>
                
            </MudGrid>
        </MudItem>
    }
</MudGrid>

@code {
  
    private string? _clientId;
    private string? _idPBaseUrl;

    [Parameter]
    public string? ClientId
    {
        get => _clientId;
        set
        {
            _clientId = value;

            if (_clientId != null && 
                ClientRegistrations != null &&
                ClientRegistrations.TryGetValue(_clientId, out var registration))
            {
                GrantType = registration.GrantType;
                SubjAltName = registration.SubjAltName;
                ActivateRegistration(registration).GetAwaiter();
            }
        }
    }

    [Parameter]
    public bool TieredOauth { get; set; }

    [Parameter]
    public EventCallback<ClientRegistration> ClientIdSelected { get; set; }

    internal async Task ActivateRegistration(ClientRegistration registration)
    {
        await ClientIdSelected.InvokeAsync(registration);
    }

    [Parameter]
    public string? IdPBaseUrl
    {
        get
        {
            if (ClientId == null)
            {
                return null;
            }

            return _idPBaseUrl;

        }
        set
        {
            if (ClientId != null)
            {
                _idPBaseUrl = value;
            }
        }
    }

    [Parameter]
    public EventCallback<string> IdPBaseUrlSelected { get; set; }

    internal async Task SelectIdPBaseUrl()
    {
        await IdPBaseUrlSelected.InvokeAsync(IdPBaseUrl);
    }
    

    [Parameter]
    public IDictionary<string, ClientRegistration>? ClientRegistrations { get; set; }


    [Parameter]
    public ClientRegistration? SelectedRegistration { get; set; }

    protected override async Task OnParametersSetAsync()
    {
    
    }

    /// <summary>
    /// Method invoked after each time the component has been rendered. Note that the component does
    /// not automatically re-render after the completion of any returned <see cref="T:System.Threading.Tasks.Task" />, because
    /// that would cause an infinite render loop.
    /// </summary>
    /// <param name="firstRender">
    /// Set to <c>true</c> if this is the first time <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(System.Boolean)" /> has been invoked
    /// on this component instance; otherwise <c>false</c>.
    /// </param>
    /// <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.</returns>
    /// <remarks>
    /// The <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(System.Boolean)" /> and <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(System.Boolean)" /> lifecycle methods
    /// are useful for performing interop, or interacting with values received from <c>@ref</c>.
    /// Use the <paramref name="firstRender" /> parameter to ensure that initialization work is only performed
    /// once.
    /// </remarks>
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (ClientRegistrations != null && 
                SelectedRegistration != null && 
                ClientRegistrations.ContainsKey(SelectedRegistration.ClientId))
            {
                ClientId = SelectedRegistration.ClientId;
                GrantType = SelectedRegistration.GrantType;
                SubjAltName = SelectedRegistration.SubjAltName;
            }
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    public string? GrantType { get; set; }

    public string? SubjAltName { get; set; }

}
