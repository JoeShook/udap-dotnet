@implements IDisposable

<InputFile id="fileInput" OnChange="UploadFilesAsync" hidden />
<MudGrid Spacing="2" Justify="Justify.FlexEnd" Class="bottom:0;right:0">
    <MudItem xs="12">

        <MudFab Class="ma-2"
                style="float: right;"
                HtmlTag="label"
                Size="Size.Small"
                Color="@CertLoadedColor"
                Icon="@AppState.CertificateIcon"
                Label="Client Cert"
                Title="Upload Client Certificate"
                IconSize="Size.Small"
                for="fileInput"/>

        <MudFab HtmlTag="label"
                Class="ma-2"
                style="float: right;"
                Size="Size.Small"
                Color="@CertLoadedColor"
                Icon="@AppState.CertificateIcon"
                Label="Test Cert"
                Title="Use Test Client Certificate"
                IconSize="Size.Small"
                OnClick="@LoadTestCertificate"/>
    </MudItem>   
    @if (!string.IsNullOrEmpty(AppState.ClientCertificateInfo?.DistinguishedName) ||
         !string.IsNullOrEmpty(AppState.ClientCertificateInfo?.Thumbprint))
    {

        <MudItem xs="12">
            <MudText style="float: right;" Typo="Typo.body2">@AppState.ClientCertificateInfo?.DistinguishedName</MudText>
        </MudItem>

        <MudItem xs="12">
            <MudText style="float: right;" Typo="Typo.caption"> Thumbprint (sha1) </MudText>
            <MudText style="float: right;" Typo="Typo.body2">@AppState.ClientCertificateInfo?.Thumbprint </MudText>
        </MudItem>
    }
</MudGrid>

@code {
    
    [Inject] RegisterService RegisterService { get; set; } = null!;
    [CascadingParameter] CascadingAppState AppState { get; set; } = null!;
    [Inject] IDialogService DialogService { get; set; } = null!;

    readonly PeriodicTimer _periodicTimer = new PeriodicTimer(TimeSpan.FromMinutes(5));
    private bool _checkServerSession;

    protected override async Task OnInitializedAsync()
    {
        var clientCertificateLoadStatus = await RegisterService.ClientCertificateLoadStatus();
        await AppState.SetPropertyAsync(this, nameof(AppState.ClientCertificateInfo), clientCertificateLoadStatus);
        await SetCertLoadedColor(clientCertificateLoadStatus?.CertLoaded);
        RunTimer();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Bq.Events.OnBlur += Events_OnBlur;
            Bq.Events.OnFocusAsync += Events_OnFocus;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Events_OnFocus(FocusEventArgs obj)
    {
        var clientCertificateLoadStatus = await RegisterService.ClientCertificateLoadStatus();
        await AppState.SetPropertyAsync(this, nameof(AppState.ClientCertificateInfo), clientCertificateLoadStatus);
        await SetCertLoadedColor(clientCertificateLoadStatus?.CertLoaded);
        _checkServerSession = true;
    }

    private void Events_OnBlur(FocusEventArgs obj)
    {
        _checkServerSession = false;
    }

    private async Task SetCertLoadedColor(CertLoadedEnum? isCertLoaded)
    {
        switch (isCertLoaded)
        {
            case CertLoadedEnum.Negative:
                CertLoadedColor = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), false);
                break;
            case CertLoadedEnum.Positive:
                CertLoadedColor = Color.Success;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), true);
                break;
            case CertLoadedEnum.InvalidPassword:
                CertLoadedColor = Color.Warning;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), false);
                break;
            default:
                CertLoadedColor = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), false);
                break;
        }

        this.StateHasChanged();
    }


    public Color CertLoadedColor { get; set; } = Color.Error;


    private async Task UploadFilesAsync(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 10;

        var uploadStream = await new StreamContent(e.File.OpenReadStream(maxFileSize)).ReadAsStreamAsync();
        var ms = new MemoryStream();
        await uploadStream.CopyToAsync(ms);
        var certBytes = ms.ToArray();

        await RegisterService.UploadClientCertificate(Convert.ToBase64String(certBytes));

        //dialog
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<Password_Dialog>("Certificate Password", options);
        var result = await dialog.Result;
        var certViewModel = await RegisterService.ValidateCertificate(result.Data?.ToString() ?? "");
        await SetCertLoadedColor(certViewModel?.CertLoaded);
        await AppState.SetPropertyAsync(this, nameof(AppState.ClientCertificateInfo), certViewModel);
    }

    private async Task LoadTestCertificate()
    {
        var certViewModel = await RegisterService.LoadTestCertificate();
        await SetCertLoadedColor(certViewModel?.CertLoaded);
        await AppState.SetPropertyAsync(this, nameof(AppState.ClientCertificateInfo), certViewModel);
    }

    async void RunTimer()
    {
        while (await _periodicTimer.WaitForNextTickAsync())
        {
            if (_checkServerSession)
            {
                var certViewModel = await RegisterService.ClientCertificateLoadStatus();
                await AppState.SetPropertyAsync(this, nameof(AppState.ClientCertificateInfo), certViewModel);
                await SetCertLoadedColor(certViewModel?.CertLoaded);
            }
        }
    }


    public void Dispose()
    {
        _periodicTimer.Dispose();
    }
}
