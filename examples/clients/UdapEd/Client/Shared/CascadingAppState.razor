@using Microsoft.IdentityModel.Tokens;
@using Udap.Model.Registration
@using Udap.Model.Access
@using UdapEd.Client.Services
@using UdapEd.Shared.Model
@using System.Collections.Specialized
@implements UdapEd.Client.Services.IAppState
@inject ILocalStorageService LocalStorageService

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {

    [Parameter] public RenderFragment ChildContent { get; set; } = null!;

    private string _caller = "";

    public void SetProperty(
        ComponentBase caller,
        string propertyName,
        object? propertyValue, 
        bool saveChanges = true,
        bool fhirStateHasChanged = true)
    {
        try
        {
            var prop = this.GetType().GetProperty(propertyName);
            if (prop != null)
            {
                this._caller = caller.GetType().Name;
                prop.SetValue(this, propertyValue);
                if (saveChanges)
                {
                    this.SaveChanges(); //WASM:: Cannot .GetAwaiter().GetResult() will not work.  Error: "Cannot wait on monitors on this runtime
                }
                if (fhirStateHasChanged)
                {
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Console.WriteLine($"$Failed to set property: {propertyName}");
        }
    }

    public async Task SetPropertyAsync(
        ComponentBase caller,
        string propertyName,
        object? propertyValue, 
        bool saveChanges = true,
        bool fhirStateHasChanged = true)
    {
        try
        {
            var prop = this.GetType().GetProperty(propertyName);
            if (prop != null)
            {
                this._caller = caller.GetType().Name;
                prop.SetValue(this, propertyValue);
                if (saveChanges)
                {
                    await SaveChanges();
                }
                if (fhirStateHasChanged)
                {
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Console.WriteLine($"$Failed to set property: {propertyName}");
        }
    }

    private const string CERT_DEFAULT_BASE_URL = "https://fhirlabs.net/fhir/r4";
    private string? _baseUrl = CERT_DEFAULT_BASE_URL;

    public string? BaseUrl
    {
        get => _baseUrl;
        private set
        {
            _baseUrl = value;
            if (_caller == "Toolbar")
            {
                // The Toolbar component changed the AppState Message property
            }
        }
    }

    public string Community { get; private set; }

    private OrderedDictionary? _baseUrls;

    public OrderedDictionary? BaseUrls
    {
        get
        {
            if (_baseUrls == null || !(_baseUrls.Count > 0))
            {
                _baseUrls = new OrderedDictionary();
                _baseUrls.Add(CERT_DEFAULT_BASE_URL, null);
            }
            return _baseUrls;
        }
        set => _baseUrls = value;
    }

    private ClientStatus _status = new ClientStatus(false, "Missing");

    public UdapMetadata? UdapMetadata { get; private set; }

    public RawSoftwareStatementAndHeader? SoftwareStatementBeforeEncoding { get; private set; }

    public UdapRegisterRequest? UdapRegistrationRequest { get; private set; }

    public Oauth2FlowEnum Oauth2Flow { get; private set; }

    public RegistrationDocument? RegistrationDocument { get; private set; }

    public UdapClientCredentialsTokenRequestModel? ClientCredentialsTokenRequest { get; private set; }

    public UdapAuthorizationCodeTokenRequestModel? AuthorizationCodeTokenRequest { get; private set; }

    public AccessCodeRequestResult? AccessCodeRequestResult { get; private set; }

    public LoginCallBackResult? LoginCallBackResult { get; private set; }

    public TokenResponseModel? AccessTokens { get; private set; }

    public ClientStatus Status
    {
        get
        {
            if (AccessTokens == null)
            {
                return new ClientStatus(false, "Missing");
            }

            if (AccessTokens.IsError)
            {
                return new ClientStatus(false, "Error");
            }

            if (DateTime.UtcNow >= AccessTokens.ExpiresAt)
            {
                return new ClientStatus (false, "Expired");
            }

            var tokensList = new List<string>();

            if (!AccessTokens.AccessToken.IsNullOrEmpty())
            {
                tokensList.Add("Access");
            }
            if (!AccessTokens.IdentityToken.IsNullOrEmpty())
            {
                tokensList.Add("Identity");
            }
            if (!AccessTokens.RefreshToken.IsNullOrEmpty())
            {
                tokensList.Add("Refresh");
            }

            var statusMessage = string.Join(" | ", tokensList);

            return new ClientStatus(true, statusMessage);
        }

        private set
        {
            _status = value;
            if (_caller == "udapBusinessToBusiness")
            {
                //example of potential logic
            }
        }
    }

    /// <summary>
    /// Is the client cert loaded with private key?
    /// </summary>
    public bool CertificateLoaded { get; set; }

    /// <summary>
    /// Is an anchor loaded to validated trust to a resource servers software statement
    /// </summary>
    public bool AnchorLoaded { get; set; }

    public CertificateStatusViewModel? ClientCertificateInfo { get; set; }

    public CertificateStatusViewModel? AnchorCertificateInfo { get; set; }

    public AuthorizationCodeRequest? AuthorizationCodeRequest { get; private set; }

    /// <summary>
    /// Certificate from Material Design Icons
    /// </summary>
    public string CertificateIcon = "<svg style=\"width:24px;height:24px\" viewBox=\"0 0 24 24\">" +
    "<path fill=\"currentColor\" d=\"M13 21L15 20L17 21V14H13M17 9V7L15 8L13 7V9L11 10L13 11V13L15 12L17 13V11L19 10M20 3H4A2 2 0 0 0 2 5V15A2 2 0 0 0 4 17H11V15H4V5H20V15H19V17H20A2 2 0 0 0 22 15V5A2 2 0 0 0 20 3M11 8H5V6H11M9 11H5V9H9M11 14H5V12H11Z\" />" +
    "</svg>";

    private const string UdapStateKeyName = "udapClientState";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // do this only once
        {
            // Get the JSON data
            var json = await LocalStorageService.GetItemAsStringAsync(UdapStateKeyName);
            if (!string.IsNullOrEmpty(json))
            {
                // Deserialize to AppStateData
                var appStateData = JsonSerializer.Deserialize<UdapClientState>(json);

                var properties = appStateData?.GetType().GetProperties();
                if (properties != null)
                {
                    foreach (var property in properties)
                    {
                        var type = property.PropertyType;
                        var value = property.GetValue(appStateData);
                        SetProperty(this, property.Name, value, false);
                    }
                    // Re-render
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    public async Task SaveChanges()
    {
        // LocalStorage allows up to 5MB by default.
        // Test: https://arty.name/localstorage.html
        // TIP: Never store sensitive data in LocalStorage

        var appState = (IAppState)this;
        var json = JsonSerializer.Serialize(appState);
        await LocalStorageService.SetItemAsStringAsync(UdapStateKeyName, json);
    }
}