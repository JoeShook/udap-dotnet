<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            Select a known Identity Provider
            <MudIcon Icon="@Icons.Material.Filled.Input" Class="mr-3 mb-n1"/>
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm>
            <MudSelect @bind-Value="IdP"
                       Label="Select Client"
                       Placeholder="Please Select"
                       AdornmentIcon="@Icons.Material.Outlined.ArrowDropDown"
                       AdornmentColor="Color.Primary"
                       Variant="Variant.Outlined"
                       FullWidth=false >
                @if (AppState.IdPDictionary != null)
                {
                    foreach (string key in AppState.IdPDictionary.Keys)
                    {
                        <MudSelectItem Value="@key">@key</MudSelectItem>
                    }
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    [CascadingParameter]
    public CascadingAppState AppState { get; set; } = null!;

    private string? IdP { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(IdP));
    void Cancel() => MudDialog.Cancel();

    /// <summary>
    /// Method invoked when the component is ready to start, having received its
    /// initial parameters from its parent in the render tree.
    /// </summary>
    protected override void OnInitialized()
    {
        if (AppState.IdPDictionary == null)
        {
            return;
        }

        var enumerator = AppState.IdPDictionary.GetEnumerator();

        if (enumerator.MoveNext())
        {
            IdP = enumerator.Key.ToString();
        }
    }

}
