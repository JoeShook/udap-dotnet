@using UdapEd.Client.Services
@using UdapEd.Shared.Model
@using BQuery
@inject IJSRuntime JSRuntime
@inject RegisterService RegisterService
@inject IDialogService DialogService
@implements IDisposable

<InputFile id="fileInput" OnChange="UploadFilesAsync" hidden />

<MudAppBar Elevation="3" Style="background-image: linear-gradient( 109.6deg,  rgba(240,240,240,1) 11.2%, rgba(240,240,240,1) 91.1% );">
  <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                 OnClick="@DrawerToggle" />
  <MudSpacer />
  
  <MudFab Class="ma-2"
          HtmlTag="label"
          Size="Size.Small"
          Color="@CertLoadedColor"
          Icon="@_certificate"
          Label="Client Cert"
          Title="Upload Client Certificate"
          IconSize="Size.Small"
          for="fileInput" />

  <MudFab HtmlTag="label"
          Class="ma-2"
          Size="Size.Small"
          Color="@CertLoadedColor"
          Icon="@_certificate"
          Label="Test Cert"
          Title="Use Test Client Certificate"
          IconSize="Size.Small"
          OnClick="@LoadTestCertificate" />

  <MudSpacer />
  Token Status:&nbsp;<MudText Color="@(AppState.Status is {IsValid: false } ? Color.Error : Color.Success)">@AppState.Status.StatusMessage</MudText>
  <MudImage Class="cursor-pointer mud-ripple ma-2" Src="images/hl7/icon-fhir-32.png" Alt="Fhir Icon"  style="height: 24px; width: 24px"
            @onclick="@GoToIG" />
  <MudAvatar Class="cursor-pointer mud-ripple" Image="https://avatars.githubusercontent.com/u/77421324" Alt="UDAP Avatar" Size="Size.Small"
             @onclick="@GoToUdapOrg" />
  <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Dark"
                 Link="https://github.com/udap-tools/udap-dotnet/" Target="_blank" />
  <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Dark" Edge="Edge.End" />
</MudAppBar>

<MudDrawer @bind-Open="_drawerOpen" Elevation="2">
  <MudDrawerHeader>
    <MudTooltip Placement="Placement.End" Style="padding-top: 30px">
      <ChildContent>
        <MudText Typo="Typo.h5">FhirLabs UdapEd</MudText>
      </ChildContent>
      <TooltipContent>
        <MudText Typo="Typo.h6">UDAP Education Tool</MudText>
        <MudText Typo="Typo.body2">Security for Scalable Registration, Authentication, and Authorization</MudText>
        <MudIcon Icon="@Icons.Material.Filled.CastForEducation" />
      </TooltipContent>
    </MudTooltip>
  </MudDrawerHeader>
  <MudDivider Style="-o-flex-grow: 0; -webkit-flex-grow: 0; flex-grow: 0;" />
  <NavMenu />
</MudDrawer>


@code {

    [CascadingParameter]
    public CascadingAppState AppState { get; set; } = null!;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    PeriodicTimer _periodicTimer = new PeriodicTimer(TimeSpan.FromMinutes(5));
    private bool _checkServerSession = false;

    protected override async Task OnInitializedAsync()
    {
        SetCertLoadedColor(await RegisterService.ClientCertificateLoadStatus());
        RunTimer();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Bq.Events.OnBlur += Events_OnBlur;
            Bq.Events.OnFocusAsync += Events_OnFocus;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Events_OnFocus(FocusEventArgs obj)
    {
        await SetCertLoadedColor(await RegisterService.ClientCertificateLoadStatus());
        _checkServerSession = true;
    }

    private void Events_OnBlur(FocusEventArgs obj)
    {
        _checkServerSession = false;
    }
    
    private async Task SetCertLoadedColor(CertLoadedEnum isCertLoaded)
    {
        switch (isCertLoaded)
        {
            case CertLoadedEnum.Negative:
                CertLoadedColor = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), false);
                break;
            case CertLoadedEnum.Positive:
                CertLoadedColor = Color.Success;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), true);
                break;
            case CertLoadedEnum.InvalidPassword:
                CertLoadedColor = Color.Warning;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), false);
                break;
            default:
                CertLoadedColor = Color.Error;
                await AppState.SetPropertyAsync(this, nameof(AppState.CertificateLoaded), false);
                break;
        }

        this.StateHasChanged();
    }


    public Color CertLoadedColor { get; set; } = Color.Error;

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    async Task GoToIG()
    {
        await JSRuntime.InvokeVoidAsync("open", "http://hl7.org/fhir/us/udap-security/", "_blank");
    }

    async Task GoToUdapOrg()
    {
        await JSRuntime.InvokeVoidAsync("open", "http://udap.org/", "_blank");
    }


    //Certificate from Material Design Icons
    string _certificate = "<svg style=\"width:24px;height:24px\" viewBox=\"0 0 24 24\">" +
        "<path fill=\"currentColor\" d=\"M13 21L15 20L17 21V14H13M17 9V7L15 8L13 7V9L11 10L13 11V13L15 12L17 13V11L19 10M20 3H4A2 2 0 0 0 2 5V15A2 2 0 0 0 4 17H11V15H4V5H20V15H19V17H20A2 2 0 0 0 22 15V5A2 2 0 0 0 20 3M11 8H5V6H11M9 11H5V9H9M11 14H5V12H11Z\" />" +
        "</svg>";


    private async Task UploadFilesAsync(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 10;

        var uploadStream = await new StreamContent(e.File.OpenReadStream(maxFileSize)).ReadAsStreamAsync();
        var ms = new MemoryStream();
        await uploadStream.CopyToAsync(ms);
        var certBytes = ms.ToArray();

        await RegisterService.UploadClientCert(Convert.ToBase64String(certBytes));

        //dialog
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<Password_Dialog>("Certificate Password", options);
        var result = await dialog.Result;
        var certLoaded = await RegisterService.ValidateCertificate(result.Data.ToString() ?? "");
        SetCertLoadedColor(certLoaded);
    }

    private async Task LoadTestCertificate()
    {
        var result = await RegisterService.LoadTestCertificate();
        SetCertLoadedColor(result);
    }

    async void RunTimer()
    {
        while (await _periodicTimer.WaitForNextTickAsync())
        {
            if (_checkServerSession)
            {
                await SetCertLoadedColor(await RegisterService.ClientCertificateLoadStatus());
            }
        }
    }


    public void Dispose()
    {
        _periodicTimer?.Dispose();
    } 
}
